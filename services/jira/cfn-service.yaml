AWSTemplateFormatVersion: 2010-09-09
Description: Example Deployment of Service

Parameters:

  CloudFrontCertificateArn:
    Description: wildcard certificate for environment
    Type: String

  ContainerMemory:
    Description: Memory for Container
    Type: Number
    Default: 3968

  ContainerPort:
    Description: Port of Container
    Type: Number
    Default: 8080

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  ServiceDomainName:
    Description: Domain Name of the Service, for example; upsource.example.com
    Type: String
    Default: jira.example.com

  ServiceName:
    Description: Name of the Service
    Type: String
    Default: jira

  ServicePriority:
    Description: Priority for Application Load Balancer Listener
    Type: Number
    Default: 10

  RDSUsername:
    Description: Username for database
    Type: String
    Default: root
    NoEcho: true

  RDSPassword:
    Description: Password for database
    Type: String
    Default: password
    NoEcho: true

Resources:

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref ServiceDomainName
        CacheBehaviors:
          - AllowedMethods: [ GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE ]
            CachedMethods: [ GET, HEAD, OPTIONS ]
            CachePolicyId: !Ref CloudFrontStaticContentPolicy
            Compress: true
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # forward all
            PathPattern: "/s/*"
            SmoothStreaming: false
            TargetOriginId: !Ref ServiceName
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods: [ GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE ]
            CachedMethods: [ GET, HEAD, OPTIONS ]
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # cache optimized
            Compress: true
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # forward all
            PathPattern: "/images/*"
            SmoothStreaming: false
            TargetOriginId: !Ref ServiceName
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          AllowedMethods: [ GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE ]
          CachedMethods: [ GET, HEAD, OPTIONS ]
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # disable caching
          Compress: true
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # forward all
          SmoothStreaming: false
          TargetOriginId: !Ref ServiceName
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 30
              OriginProtocolPolicy: https-only
              OriginReadTimeout: 60
            DomainName:
              Fn::ImportValue:
                !Sub ${EnvironmentName}-load-balancer-dns-name
            Id: !Ref ServiceName
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudFrontCertificateArn
          SslSupportMethod: sni-only

  CloudFrontStaticContentPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 86400
        MinTTL: 86400
        Name: !Sub ${ServiceName}-static-content-policy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-listener
      Priority: !Ref ServicePriority
      Conditions:
        - Field: host-header
          Values: [ !Ref ServiceDomainName ]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-302
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 6
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-vpc

  Service:
    DependsOn: ListenerRule
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-ecs-cluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 300
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Sub ${ServiceName}
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: !Split
            - ","
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-ecs-security-group
          Subnets: !Split
            - ","
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-private-subnets
      TaskDefinition: !Ref TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            # File
            - Name: JIRA_HOME
              Value: /var/efs
            # JVM Settings
            - Name: JVM_MINIMUM_MEMORY
              Value: 3072m
            - Name: JVM_MAXIMUM_MEMORY
              Value: 3072m
            - Name: JVM_RESERVED_CODE_CACHE_SIZE
              Value: 512m
            # Reverse Proxy Settings
            - Name: ATL_PROXY_NAME
              Value: !GetAtt CloudFront.DomainName
            - Name: ATL_PROXY_PORT
              Value: 443
            - Name: ATL_TOMCAT_SCHEME
              Value: https
            # Database Settings
            - Name: ATL_JDBC_URL
              Value:
                !Join
                - ''
                - - 'jdbc:mysql://'
                  - Fn::ImportValue:
                      !Sub ${EnvironmentName}-rds-endpoint-address
                  - ':3306/jira'
            - Name: ATL_JDBC_USER
              Value: !Ref RDSUsername
            - Name: ATL_JDBC_PASSWORD
              Value: !Ref RDSPassword
            - Name: ATL_DB_DRIVER
              Value: com.mysql.jdbc.Driver
            - Name: ATL_DB_TYPE
              Value: mysql
            - Name: ATL_DB_SCHEMA_NAME
              Value: ''
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-${ServiceName}:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
          Memory: !Ref ContainerMemory
          MountPoints:
            - SourceVolume: efs
              ContainerPath: /var/efs
          Name: !Sub ${ServiceName}
          PortMappings:
            - ContainerPort: !Ref ContainerPort
      ExecutionRoleArn: !Ref TaskExecutionRole
      Family: !Sub ${ServiceName}
      NetworkMode: awsvpc
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              IAM: ENABLED
            FilesystemId: !GetAtt EFS.Outputs.ID
            RootDirectory: /
            TransitEncryption: ENABLED
          Name: efs

  EFS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../components/cfn-efs.yaml
      Parameters:
        ECSSecurityGroup:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-ecs-security-group
        FilesystemName: !Sub ${ServiceName}
        PrivateSubnets:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-private-subnets
        VPC:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-vpc

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ServiceName}
      RetentionInDays: 90

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ServiceName}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Statement:
          Action: [ sts:AssumeRole ]
          Effect: Allow
          Principal:
            Service: [ ecs-tasks.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ${ServiceName}-ecs-task-execution-policy
          PolicyDocument:
            Statement:
              - Action: [ ssm:GetParameters, ssm:GetParameter,
                          secretsmanager:GetSecretValue, secretsmanager:DescribeSecret,
                          kms:Decrypt ]
                Effect: Allow
                Resource: "*"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ServiceName}-ecs-task-role
      AssumeRolePolicyDocument:
        Statement:
          Action: [ sts:AssumeRole ]
          Effect: Allow
          Principal:
            Service: [ ecs-tasks.amazonaws.com ]
      Policies:
        - PolicyName: !Sub ${ServiceName}-ecs-task-policy
          PolicyDocument:
            Statement:
              - Action: [ elasticfilesystem:* ]
                Effect: Allow
                Resource: "*"
