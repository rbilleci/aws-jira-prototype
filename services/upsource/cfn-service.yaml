AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Upsource

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  ServiceName:
    Description: Name of the Service
    Type: String
    Default: upsource

Resources:

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
          # assets
          - AllowedMethods: [ GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE ]
            CachedMethods: [ GET, HEAD, OPTIONS ]
            CachePolicyId: !Ref CloudFrontStaticContentPolicy
            Compress: true
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # forward all
            PathPattern: "*/assets/*"
            SmoothStreaming: false
            TargetOriginId: !Ref ServiceName
            ViewerProtocolPolicy: redirect-to-https
          # frontend
          - AllowedMethods: [ GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE ]
            CachedMethods: [ GET, HEAD, OPTIONS ]
            CachePolicyId: !Ref CloudFrontStaticContentPolicy
            Compress: true
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # forward all
            PathPattern: "*/frontend/*"
            SmoothStreaming: false
            TargetOriginId: !Ref ServiceName
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          AllowedMethods: [ GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE ]
          CachedMethods: [ GET, HEAD, OPTIONS ]
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # disable caching
          Compress: true
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # forward all
          SmoothStreaming: false
          TargetOriginId: !Ref ServiceName
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 30
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 60
            DomainName: !GetAtt NLB.DNSName
            Id: !Ref ServiceName
        PriceClass: PriceClass_All
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ServiceName}

  CloudFrontStaticContentPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 86400
        MinTTL: 86400
        Name: !Sub ${EnvironmentName}-${ServiceName}-static-content
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Name: !Sub ${EnvironmentName}-${ServiceName}-nlb
      Subnets: !Split
        - ","
        - Fn::ImportValue:
            !Sub ${EnvironmentName}-public-subnets
      Type: network

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      #HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      #Matcher:
      #  HttpCode: 200-302
      Port: 80
      Protocol: TCP
      #ProtocolVersion: HTTP2
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-vpc

  Service:
    DependsOn: Listener
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-ecs-cluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 180
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-${ServiceName}
          ContainerPort: 80
          TargetGroupArn: !Ref  TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: !Split
            - ","
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-ecs-security-group
          Subnets: !Split
            - ","
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-private-subnets
      TaskDefinition: !Ref TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-${ServiceName}:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
          Memory: 8192
          MountPoints:
            - SourceVolume: efs-data
              ContainerPath: /opt/upsource/data
            - SourceVolume: efs-conf
              ContainerPath: /opt/upsource/conf
            - SourceVolume: efs-backups
              ContainerPath: /opt/upsource/backups
          Name: !Sub ${EnvironmentName}-${ServiceName}
          PortMappings:
            - ContainerPort: 80
      ExecutionRoleArn: !Ref TaskExecutionRole
      Family: !Sub ${EnvironmentName}-${ServiceName}
      NetworkMode: awsvpc
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !GetAtt EFSDataAccessPoint.AccessPointId
            FilesystemId: !GetAtt EFS.Outputs.ID
            RootDirectory: /
            TransitEncryption: ENABLED
          Name: efs-data
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !GetAtt EFSConfAccessPoint.AccessPointId
            FilesystemId: !GetAtt EFS.Outputs.ID
            RootDirectory: /
            TransitEncryption: ENABLED
          Name: efs-conf
        - EFSVolumeConfiguration:
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !GetAtt EFSBackupsAccessPoint.AccessPointId
            FilesystemId: !GetAtt EFS.Outputs.ID
            RootDirectory: /
            TransitEncryption: ENABLED
          Name: efs-backups

  EFS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../components/cfn-efs.yaml
      Parameters:
        ECSSecurityGroup:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-ecs-security-group
        FilesystemName: !Sub ${EnvironmentName}-${ServiceName}
        PrivateSubnets:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-private-subnets
        VPC:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-vpc

  EFSDataAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !GetAtt EFS.Outputs.ID
      RootDirectory:
        CreationInfo:
          OwnerGid: "13001"
          OwnerUid: "13001"
          Permissions: "750"
        Path: /data

  EFSConfAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !GetAtt EFS.Outputs.ID
      RootDirectory:
        CreationInfo:
          OwnerGid: "13001"
          OwnerUid: "13001"
          Permissions: "750"
        Path: /conf

  EFSBackupsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !GetAtt EFS.Outputs.ID
      RootDirectory:
        CreationInfo:
          OwnerGid: "13001"
          OwnerUid: "13001"
          Permissions: "750"
        Path: /backups

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-${ServiceName}
      RetentionInDays: 90

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-${ServiceName}-ECSTaskExecutionRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Action: [ sts:AssumeRole ]
          Principal:
            Service: [ ecs-tasks.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-${ServiceName}
          PolicyDocument:
            Statement:
              - Action: [ secretsmanager:GetSecretValue, secretsmanager:DescribeSecret, kms:Decrypt ]
                Effect: Allow
                Resource: "*"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-${ServiceName}-ECSTaskRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          Action: [ sts:AssumeRole ]
          Effect: Allow
          Principal:
            Service: [ ecs-tasks.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess