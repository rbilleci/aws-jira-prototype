AWSTemplateFormatVersion: 2010-09-09
Parameters:

  ALBSecurityGroup:
    Description: Select the Security Group to use for the ALB
    Type: AWS::EC2::SecurityGroup::Id

  AMI:
    Description: ECS-Optimized AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

  DesiredSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 1

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: m5.xlarge

  MaxSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 3

  MinSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 1

  PrivateSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  RDSEndpointAddress:
    Description: Endpoint address for RDS instance
    Type: String

  RDSSecurityGroup:
    Description: Select the Security Group to use for the RDS
    Type: AWS::EC2::SecurityGroup::Id

  VPC:
    Description: Choose which VPC this ECS cluster should be deployed to
    Type: AWS::EC2::VPC::Id

Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-Hosts

  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Ref EnvironmentName
      LaunchTemplateData:
        DisableApiTermination: false
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        Monitoring:
          Enabled: true
        SecurityGroupIds: [ !Ref SecurityGroup ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${EnvironmentName} >> /etc/ecs/ecs.config
            echo export RDS_ENDPOINT_ADDRESS=${RDSEndpointAddress} >> /home/ec2-user/.bashrc
            echo export RDS_ENDPOINT_ADDRESS=${RDSEndpointAddress} >> /home/ssm-user/.bashrc
            echo export DOMAIN=${EnvironmentName} >> /home/ec2-user/.bashrc
            echo export DOMAIN=${EnvironmentName} >> /home/ssm-user/.bashrc
            echo export REGION=${AWS::Region} >> /home/ec2-user/.bashrc
            echo export REGION=${AWS::Region} >> /home/ssm-user/.bashrc
            yum update -y
            yum install -y aws-cfn-bootstrap
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
            yum update -y
            yum install -y mysql aws-cli jq

  AutoScalingGroup:
    DependsOn: Cluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref DesiredSize
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ECS host
          PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref PrivateSubnets
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Role ]

  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          Action: [ "sts:AssumeRole" ]
          Effect: Allow
          Principal:
            Service: [ ec2.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AdministratorAccess # NOTE: narrow permission - needed for EFS access
      Policies:
        - PolicyName: ecs-role
          PolicyDocument:
            Statement:
              Action:
                - ecs:CreateCluster
                - ecs:DeregisterContainerInstance
                - ecs:DiscoverPollEndpoint
                - ecs:Poll
                - ecs:RegisterContainerInstance
                - ecs:StartTelemetrySession
                - ecs:Submit*
                - ecr:BatchCheckLayerAvailability
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
                - ecr:GetAuthorizationToken
              Effect: Allow
              Resource: "*"

Outputs:

  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref Cluster

  SecurityGroup:
    Description: A reference to the security group for load balancers
    Value: !Ref SecurityGroup
